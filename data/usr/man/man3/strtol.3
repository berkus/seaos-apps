.TH strtol 3 "" "" ""
.SH SYNOPSIS
strtol \- string to long
.SH ANSI_SYNOPSIS
#include <stdlib.h>
.br
long strtol(const char *
.IR s ,
char **
.IR ptr ,int
.IR base );
.br

long _strtol_r(void *
.IR reent ,
.br
const char *
.IR s ,
char **
.IR ptr ,int
.IR base );
.br
.SH TRAD_SYNOPSIS
#include <stdlib.h>
.br
long strtol (
.IR s ,
.IR ptr ,
.IR base )
.br
char *
.IR s ;
.br
char **
.IR ptr ;
.br
int 
.IR base ;
.br

long _strtol_r (
.IR reent ,
.IR s ,
.IR ptr ,
.IR base )
.br
char *
.IR reent ;
.br
char *
.IR s ;
.br
char **
.IR ptr ;
.br
int 
.IR base ;
.br
.SH DESCRIPTION
The function 
.BR strtol 
converts the string 
.BR *<[s >>
to
a 
.BR long .
First, it breaks down the string into three parts:
leading whitespace, which is ignored; a subject string consisting
of characters resembling an integer in the radix specified by 
.IR base ;
and a trailing portion consisting of zero or more unparseable characters,
and always including the terminating null character. Then, it attempts
to convert the subject string into a 
.BR long 
and returns the
result.

If the value of 
.IR base 
is 0, the subject string is expected to look
like a normal C integer constant: an optional sign, a possible `
.BR 0x '
indicating a hexadecimal base, and a number. If 
.IR base 
is between
2 and 36, the expected form of the subject is a sequence of letters
and digits representing an integer in the radix specified by 
.IR base ,
with an optional plus or minus sign. The letters 
.BR a --<<z>>
(or,
equivalently, 
.BR A --<<Z>>)
are used to signify values from 10 to 35;
only letters whose ascribed values are less than 
.IR base 
are
permitted. If 
.IR base 
is 16, a leading 
.BR 0x 
is permitted.

The subject sequence is the longest initial sequence of the input
string that has the expected form, starting with the first
non-whitespace character. If the string is empty or consists entirely
of whitespace, or if the first non-whitespace character is not a
permissible letter or digit, the subject string is empty.

If the subject string is acceptable, and the value of 
.IR base 
is zero,
.BR strtol 
attempts to determine the radix from the input string. A
string with a leading 
.BR 0x 
is treated as a hexadecimal value; a string with
a leading 0 and no 
.BR x 
is treated as octal; all other strings are
treated as decimal. If 
.IR base 
is between 2 and 36, it is used as the
conversion radix, as described above. If the subject string begins with
a minus sign, the value is negated. Finally, a pointer to the first
character past the converted subject string is stored in 
.IR ptr ,
if
.IR ptr 
is not 
.BR NULL .

If the subject string is empty (or not in acceptable form), no conversion
is performed and the value of 
.IR s 
is stored in 
.IR ptr 
(if 
.IR ptr 
is
not 
.BR NULL ).

The alternate function 
.BR _strtol_r 
is a reentrant version. The
extra argument 
.IR reent 
is a pointer to a reentrancy structure.
.SH RETURNS
.BR strtol 
returns the converted value, if any. If no conversion was
made, 0 is returned.

.BR strtol 
returns 
.BR LONG_MAX 
or 
.BR LONG_MIN 
if the magnitude of
the converted value is too large, and sets 
.BR errno 
to 
.BR ERANGE .
.SH PORTABILITY
.BR strtol 
is ANSI.

No supporting OS subroutines are required.
.SH SOURCE
src/newlib/libc/stdlib/strtol.c
