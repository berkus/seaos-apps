.TH memcpy 3 "" "" ""
.SH SYNOPSIS
memcpy \- copy memory regions
.SH ANSI_SYNOPSIS
#include <string.h>
.br
void* memcpy(void *
.IR out ,
const void *
.IR in ,
size_t 
.IR n );
.br
.SH TRAD_SYNOPSIS
void *memcpy(
.IR out ,
.IR in ,
.IR n 
.br
void *
.IR out ;
.br
void *
.IR in ;
.br
size_t 
.IR n ;
.br
.SH DESCRIPTION
This function copies 
.IR n 
bytes from the memory region
pointed to by 
.IR in 
to the memory region pointed to by
.IR out .

If the regions overlap, the behavior is undefined.
.SH RETURNS
.BR memcpy 
returns a pointer to the first byte of the 
.IR out 
region.
.SH PORTABILITY
.BR memcpy 
is ANSI C.

.BR memcpy 
requires no supporting OS subroutines.
.SH QUICKREF
memcpy ansi pure
*/

#include <_ansi.h>
#include <stddef.h>
#include <limits.h>

/* Nonzero if either X or Y is not aligned on a "long" boundary. */
#define UNALIGNED(X, Y) \
(((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))

/* How many bytes are copied each iteration of the 4X unrolled loop. */
#define BIGBLOCKSIZE (sizeof (long) << 2)

/* How many bytes are copied each iteration of the word copy loop. */
#define LITTLEBLOCKSIZE (sizeof (long))

/* Threshhold for punting to the byte copier. */
#define TOO_SMALL(LEN) ((LEN) < BIGBLOCKSIZE)
.SH _PTR
_DEFUN (memcpy, (dst0, src0, len0),
_PTR dst0 _AND
_CONST _PTR src0 _AND
size_t len0)
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
char *dst = (char *) dst0;
char *src = (char *) src0;

_PTR save = dst0;

while (len0--)
{
*dst++ = *src++;
}

return save;
#else
char *dst = dst0;
_CONST char *src = src0;
long *aligned_dst;
_CONST long *aligned_src;
int len = len0;

/* If the size is small, or either SRC or DST is unaligned,
then punt into the byte copy loop. This should be rare. */
if (!TOO_SMALL(len) && !UNALIGNED (src, dst))
{
aligned_dst = (long*)dst;
aligned_src = (long*)src;

/* Copy 4X long words at a time if possible. */
while (len >= BIGBLOCKSIZE)
{
*aligned_dst++ = *aligned_src++;
*aligned_dst++ = *aligned_src++;
*aligned_dst++ = *aligned_src++;
*aligned_dst++ = *aligned_src++;
len -= BIGBLOCKSIZE;
}

/* Copy one long word at a time if possible. */
while (len >= LITTLEBLOCKSIZE)
{
*aligned_dst++ = *aligned_src++;
len -= LITTLEBLOCKSIZE;
}

/* Pick up any residual with a byte copier. */
dst = (char*)aligned_dst;
src = (char*)aligned_src;
}

while (len--)
*dst++ = *src++;

return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
.SH SOURCE
src/newlib/libc/string/memcpy.c
